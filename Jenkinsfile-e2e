#!/usr/bin/env groovy

def nodeImageVersion = "10.16.3"
def nodeImage = "329802642264.dkr.ecr.eu-west-1.amazonaws.com/bbc-news/node-10-lts:${nodeImageVersion}"

// Run latest every 1 hour
def cron_string = env.BRANCH_NAME == "latest" ? "0 */1 * * *" : ""

def channels = [
  simorgh: "#si_repo-simorgh",
  testAlarms: "#simorgh-alarms-test",
  liveAlarms:  "#simorgh-alarms-live"
];

def notifySlack(messageParameters, targetChannel) {
  def message = "${messageParameters.emoji} Simorgh E2Es \n*Status:* ${messageParameters.buildStatus} \n*Env:* ${messageParameters.env} \n*Branch:* ${messageParameters.branch} \n*Pipeline:* ${env.BUILD_URL}"

  slackSend(
    channel: targetChannel,
    color: messageParameters.colour,
    message: message
  )
}

def stageHasFailed = false;

node {
  properties(
    [
        buildDiscarder(
            logRotator(
                daysToKeepStr: '10',
                artifactDaysToKeepStr: '10'
            )
        ),
        pipelineTriggers([cron(cron_string)])
    ]
  )
  timeout(time: 120, unit: 'MINUTES') {
    withEnv([
      'CI=true'
    ]) {
      cleanWs() // Clean the workspace
      checkout scm // Checkout from git
      docker.image("${nodeImage}").inside('--ipc host') {
        try {
          stage ('Install & Setup') {
            sh 'make install'
          }
          stage ('Live E2Es') {
            try {
              sh 'make liveE2Es'
            } catch (Throwable e) {
              def messageParameters = [
                buildStatus: 'Failed',
                env: 'LIVE',
                branch: env.BRANCH_NAME,
                colour: 'danger',
                emoji: 'ðŸ˜±',
              ]

              if (env.BRANCH_NAME == 'latest') {
                notifySlack(messageParameters, channels.simorgh)
                notifySlack(messageParameters, channels.liveAlarms)
                stageHasFailed = true
              }

              currentBuild.result = 'FAILURE'
              throw e
            }
          }
          stage ('Local Prod Tests') {
            try {
              sh 'CYPRESS_SMOKE=false npm run build && npm run test:ci;'
            } catch (Throwable e) {
              def messageParameters = [
                buildStatus: 'Failed',
                env: 'LOCAL',
                branch: env.BRANCH_NAME,
                colour: 'danger',
                emoji: 'ðŸ˜±',
              ]

              if (env.BRANCH_NAME == 'latest') {
                notifySlack(messageParameters, channels.simorgh)
                notifySlack(messageParameters, channels.liveAlarms)
                stageHasFailed = true
              }

              currentBuild.result = 'FAILURE'
              throw e
            }
          }
        } catch (Throwable e) {
          echo "The pipeline has failed with the error: ${e}"
          currentBuild.result = 'FAILURE'
          throw e
        } finally {
          def buildResult = currentBuild.result ?: 'SUCCESS'

          echo "currentBuild.currentResult: ${currentBuild.currentResult}"
          echo "currentBuild.result: ${currentBuild.result}"

          if (env.BRANCH_NAME == 'latest') {
            switch (buildResult) {
              case 'SUCCESS':
                def messageParameters = [
                  buildStatus: 'SUCCESS',
                  env: 'Local and Production',
                  branch: env.BRANCH_NAME,
                  colour: 'good',
                  emoji: 'ðŸ¤Ÿ'
                ]
                notifySlack(messageParameters, channels.simorgh)
                break
              case 'UNSTABLE':
                def messageParameters = [
                  buildStatus: 'UNSTABLE',
                  env: 'Local and Production',
                  branch: env.BRANCH_NAME,
                  colour: 'danger',
                  emoji: 'ðŸ˜±',
                ]
                notifySlack(messageParameters, channels.simorgh)
                notifySlack(messageParameters, channels.liveAlarms)
                break
              case 'ABORTED':
                def messageParameters = [
                  buildStatus: 'ABORTED',
                  env: 'Local and Production',
                  branch: env.BRANCH_NAME,
                  colour: 'warning',
                  emoji: 'ðŸ™€',
                ]
                notifySlack(messageParameters, channels.simorgh)
                notifySlack(messageParameters, channels.liveAlarms)
                break
              default:
                if (stageHasFailed == false) {
                  def messageParameters = [
                    buildStatus: 'Unknown build failure',
                    env: 'Local and Production',
                    branch: env.BRANCH_NAME,
                    colour: 'danger',
                    emoji: 'ðŸ˜±',
                  ]
                  notifySlack(messageParameters, channels.simorgh)
                  notifySlack(messageParameters, channels.liveAlarms)
                }
                break
            }
          }
        }
      }
    }
  }
}
