// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ClientApp should render as exepcted 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ClientApp
    data="someData!"
    routes={
      Array [
        "someRoute",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <withRouter(App)
        initialData="someData!"
        routes={
          Array [
            "someRoute",
          ]
        }
      />,
      "data": "someData!",
      "routes": Array [
        "someRoute",
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "initialData": "someData!",
        "routes": Array [
          "someRoute",
        ],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <withRouter(App)
          initialData="someData!"
          routes={
            Array [
              "someRoute",
            ]
          }
        />,
        "data": "someData!",
        "routes": Array [
          "someRoute",
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "initialData": "someData!",
          "routes": Array [
            "someRoute",
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`ServerApp no passed routerContext should render as exepcted 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ServerApp
    context={Object {}}
    data="somePassedData"
    location="someUrl"
    routes={
      Array [
        "someRoute",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "basename": "",
      "children": <withRouter(App)
        initialData="somePassedData"
        routes={
          Array [
            "someRoute",
          ]
        }
      />,
      "context": Object {},
      "data": "somePassedData",
      "location": "someUrl",
      "routes": Array [
        "someRoute",
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "initialData": "somePassedData",
        "routes": Array [
          "someRoute",
        ],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "basename": "",
        "children": <withRouter(App)
          initialData="somePassedData"
          routes={
            Array [
              "someRoute",
            ]
          }
        />,
        "context": Object {},
        "data": "somePassedData",
        "location": "someUrl",
        "routes": Array [
          "someRoute",
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "initialData": "somePassedData",
          "routes": Array [
            "someRoute",
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`ServerApp should render as exepcted 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ServerApp
    context={
      Object {
        "context": "someRouterContext",
      }
    }
    data="somePassedData"
    location="someUrl"
    routes={
      Array [
        "someRoute",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "basename": "",
      "children": <withRouter(App)
        initialData="somePassedData"
        routes={
          Array [
            "someRoute",
          ]
        }
      />,
      "context": Object {
        "context": "someRouterContext",
      },
      "data": "somePassedData",
      "location": "someUrl",
      "routes": Array [
        "someRoute",
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "initialData": "somePassedData",
        "routes": Array [
          "someRoute",
        ],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "basename": "",
        "children": <withRouter(App)
          initialData="somePassedData"
          routes={
            Array [
              "someRoute",
            ]
          }
        />,
        "context": Object {
          "context": "someRouterContext",
        },
        "data": "somePassedData",
        "location": "someUrl",
        "routes": Array [
          "someRoute",
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "initialData": "somePassedData",
          "routes": Array [
            "someRoute",
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
